<!--
  - The MIT License
  -
  - Copyright (c) 2010-2011, Manufacture FranÃ§aise des Pneumatiques Michelin,
  - Thomas Maurel, Romain Seguy
  -
  - Permission is hereby granted, free of charge, to any person obtaining a copy
  - of this software and associated documentation files (the "Software"), to deal
  - in the Software without restriction, including without limitation the rights
  - to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  - copies of the Software, and to permit persons to whom the Software is
  - furnished to do so, subject to the following conditions:
  -
  - The above copyright notice and this permission notice shall be included in
  - all copies or substantial portions of the Software.
  -
  - THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  - IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  - FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  - AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  - LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  - OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  - THE SOFTWARE.
  -->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define"
          xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:local="local">

  <j:set var="itemPermissionGroups" value="${it.strategy.descriptor.getGroups(it.strategy.PROJECT)}"/>
  <j:set var="itemGrantedRoles" value="${it.strategy.getGrantedRoles(it.strategy.PROJECT)}"/>

  <div id="itemRoleInputFilter">
    <f:entry title="${%Filter by Role}">
      <input id="itemRoleInput" class="jenkins-input setting-input"/>
    </f:entry>
  </div>  
  <table id="projectRoles" class="center-align global-matrix-authorization-strategy-table" name="data">

      <!-- The first row will show grouping -->
      <tr class="group-row">
        <td rowspan="2" class="start" />
        <td rowspan="2" class="pane-header blank">
          ${%Role}
        </td>
        <td rowspan="2" class="pane-header blank">
          ${%Pattern}
        </td>
        <j:forEach var="g" items="${itemPermissionGroups}">
          <j:set var="cnt" value="${0}" />
          <j:forEach var="p" items="${g.permissions}">
            <j:if test="${it.strategy.descriptor.showPermission(it.strategy.PROJECT, p)}">
              <j:set var="cnt" value="${cnt+1}"/>
            </j:if>
          </j:forEach>

          <td class="pane-header" colspan="${cnt}">
            ${g.title}
          </td>
        </j:forEach>
        <l:isAdmin><td rowspan="2" class="stop" /></l:isAdmin>
      </tr>
      <!-- The second row for individual permission -->
      <tr class="caption-row">
        <j:forEach var="g" items="${itemPermissionGroups}">
          <j:forEach var="p" items="${g.permissions}">
            <j:if test="${it.strategy.descriptor.showPermission(it.strategy.PROJECT, p)}">
              <th class="pane" tooltip="${p.description}">
                <span>${p.name}</span>
              </th>
            </j:if>
          </j:forEach>
        </j:forEach>
      </tr>
      <j:forEach var="role" items="${itemGrantedRoles}">
        <tr name="[${role.key.name}]" class="permission-row">
          <local:roleRow title="${role.key.name}" pattern="${role.key.pattern}" role="${role.key}" global="${false}" type="${it.strategy.PROJECT}"
                         project="${true}"/>
        </tr>
      </j:forEach>
      <j:set var="id" value="${h.generateId()}"/>
      <tr id="${id}" style="display:none" class="permission-row">
        <local:roleRow title="{{ROLE}}" global="${false}" pattern="{{PATTERN}}" type="${it.strategy.PROJECT}" />
      </tr>
      <!-- The last two rows are used to repeat the header (if more than 20 lines) -->
      <j:if test="${itemGrantedRoles.size() ge 20}">
        <tr class="caption-row">
          <td rowspan="2" class="start" />
          <td rowspan="2" class="pane-header blank">
            ${%Role}
          </td>
          <td rowspan="2" class="pane-header blank">
            ${%Pattern}
          </td>
          <j:forEach var="g" items="${itemPermissionGroups}">
            <j:forEach var="p" items="${g.permissions}">
              <j:if test="${it.strategy.descriptor.showPermission(it.strategy.PROJECT, p)}">
                <th class="pane" tooltip="${p.description}">
                  <span>${p.name}</span>
                </th>
              </j:if>
            </j:forEach>
          </j:forEach>
        </tr>
        <tr class="group-row">
          <j:forEach var="g" items="${itemPermissionGroups}">
            <j:set var="cnt" value="${0}" />
            <j:forEach var="p" items="${g.permissions}">
              <j:if test="${it.strategy.descriptor.showPermission(it.strategy.PROJECT, p)}">
                <j:set var="cnt" value="${cnt+1}"/>
              </j:if>
            </j:forEach>

            <td class="pane-header" colspan="${cnt}">
              ${g.title}
            </td>
          </j:forEach>
          <l:isAdmin><td rowspan="2" class="stop" /></l:isAdmin>
        </tr>
      </j:if>
    </table>
  <l:isAdmin>
    <br /><br />
    <f:entry title="${%Role to add}">
      <f:textbox type="text" id="${id}text" />
    </f:entry>
    <f:entry help="${rootURL}/plugin/role-strategy/help/help-pattern.html" title="${%Pattern}">
      <f:textbox type="text" id="${id}pattern" checkUrl="'${descriptorPath}/checkPattern?value='+escape(this.value)"/>
    </f:entry>
    <f:entry>
      <input type="button" value="${%Add}" id="${id}button"/>
    </f:entry>
  </l:isAdmin>
    <script>
      <j:if test="${itemGrantedRoles.size() lt 10}">
        document.getElementById('itemRoleInputFilter').style.display = "none"
      </j:if>
      var projecttableHighlighter;
      var itemRoleCount = ${itemGrantedRoles.size()};
      (function() {
        <!-- place master outside the DOM tree so that it won't creep into the submitted form -->
        var master = document.getElementById('${id}');
        var table = master.parentNode;
        table.removeChild(master);

        var btn = $$('${id}button');
        if (!btn) {
            return;
        }
        makeButton(btn, function (e) {
          <!-- when 'add' is clicked... -->
          var name = $$('${id}text').value;
          var pattern = $$('${id}pattern').value;
          if(name=="") {
            alert("Please enter a role name");
            return;
          }
          if(pattern=="") {
            alert("Please enter a pattern");
            return;
          }
          
          if(findElementsBySelector(table,"TR").find(function(n){return n.getAttribute("name")=='['+name+']';})!=null) {
            alert("Entry for '"+name+"' already exists");
            return;
          }
          if(document.importNode!=null)
            copy = document.importNode(master,true);
          else
            copy = master.cloneNode(true); <!-- for IE -->
          copy.removeAttribute("id");
          copy.removeAttribute("style");

          var child = copy.childNodes[1];
          var doubleQuote = '"';
          child.innerHTML = escapeHTML(name);
          var patternString = doubleQuote + escapeHTML(pattern) + doubleQuote;
          child.next().innerHTML = '<a href="#" class="patternAnchor">' + patternString + '</a>';

          var hidden = document.createElement('input');
          hidden.setAttribute('name', '[pattern]');
          hidden.setAttribute('type', 'hidden');
          hidden.setAttribute('value', pattern);
          child.next().appendChild(hidden);

          var children = copy.childNodes;
          children.forEach(function(item){
            item.outerHTML = item.outerHTML.replace("{{ROLE}}", doubleEscapeHTML(name)).replace("{{PATTERN}}", doubleEscapeHTML(pattern));
          });

          child = copy.childNodes[1];
          var link = child.next().children[0];
          bindListenerToPattern(link);

          copy.setAttribute("name",'['+name+']');
          <j:if test="${itemGrantedRoles.size() lt 20}">
            table.appendChild(copy);
          </j:if>
          <j:if test="${itemGrantedRoles.size() ge 20}">
            table.insertBefore(copy,table.childNodes[table.rows.length-2]);
          </j:if>
          projecttableHighlighter.scan(copy);
          Behaviour.applySubtree(findAncestor(table,"TABLE"), true);
          itemRoleCount++;
          if (itemRoleCount >= 10) {
            document.getElementById('itemRoleInputFilter').style.display = "block";
          }
          
        });
      })();

      var bindListenerToPattern = function(elem) {
        elem.addEventListener('click', showMatchingProjects);
      }

      var showMatchingProjects = function() {
        var pattern = this.text.substring(1, this.text.length - 1);    // Ignore quotes for the pattern
        var maxJobs = 10;    // Maximum jobs to search for
        var url = 'strategy/getMatchingJobs';
        reqParams = {
          'pattern' : pattern,
          'maxJobs' : maxJobs
        }

        new Ajax.Request(url, {
          method: 'get',
          parameters: reqParams,
          onSuccess: function(req) {
            var matchingJobs = req.responseText.evalJSON().matchingJobs;

            if(matchingJobs != null) {
              showJobsModal(matchingJobs);
            } else {
              showErrorMessageModal();
            }
          },
          onFailure: showErrorMessageModal
        });
      }

      var showJobsModal = function(jobs) {
        modalText = '';
        if(jobs.length > 0) {
          modalText += 'Matching Projects:\n\n';
          for(var i = 0; i != jobs.length; i++) {
            modalText += ' - ' + jobs[i] + '\n';
          }
        } else {
          modalText += 'No matching Projects found.';
        }
        modalText += '\n\n';
        alert(modalText);
      }

      var showErrorMessageModal = function() {
        alert('Unable to fetch matching Jobs.');
      }

      Event.observe(window, 'load', function(event) {
         projecttableHighlighter = new TableHighlighter('projectRoles', 3, 2);

         // Show jobs matching a pattern on click
         var projectRolesTable = document.getElementById('projectRoles')
         var patterns = projectRolesTable.getElementsByClassName('patternAnchor');
         for(var i = 0; i != patterns.length; i++) {
           bindListenerToPattern(patterns[i]);
         }
      });

      var itemRoleFilter = function(e) {
        e.onkeyup = function() {
            let filter = document.getElementById("itemRoleInput").value.toUpperCase();
            let table = document.getElementById("projectRoles");
            filterRoles(filter, table);
        }
        e = null;
      }

      var deleteItemRole = function(e) {
        e.onclick = function() {
          var tr = findAncestor(this,"TR");
          tr.parentNode.removeChild(tr);
          itemRoleCount--;
          if (itemRoleCount &lt; 10) {
            document.getElementById('itemRoleInputFilter').style.display = "none";
            document.getElementById('itemRoleInput').value = "";
            event = new Event("keyup");
            document.getElementById('itemRoleInput').dispatchEvent(event);
          }
          return false;
        }
        e = null; <!-- avoid memory leak -->
      }
      Behaviour.register({"#projectRoles TD.stop A" : deleteItemRole,
                          "#projectRoles TD.start A" : deleteItemRole,
                          "#itemRoleInput" : itemRoleFilter,
      });

      Behaviour.register({"#projectRoles TD.in-place-edit" : function(e) {
        e.ondblclick = function() {
          if(this.childNodes.length == 2) {
            this.innerHTML = '<input type="text" name="[pattern]" value="' + this.childNodes[1].value + '" size="' + (this.childNodes[1].value.length+10) + '"/>';
          }
          else {
            this.innerHTML = '<a href="#" class="patternAnchor">&quot;' + this.childNodes[0].value.escapeHTML() + '&quot;</a><input type="hidden" name="[pattern]" value="' + this.childNodes[0].value + '"/>';
            bindListenerToPattern(this.children[0]);
          }
          return false;
        }
        e = null; <!-- again and again, avoid memory leak -->
      }});
    </script>
</j:jelly>
